import {typescriptOfSchema} from 'schemats';
import {format as prettierFormat} from 'prettier';
import path from 'path';
import fs from 'fs-extra';
// import {camelCase, upperFirst} from 'lodash';

import {config} from './knex';
import {tables} from './tables';

const GENERATED_DIR = path.join(__dirname, '..', 'src', 'generated');
const OUT_TYPES = path.join(GENERATED_DIR, 'db-types.ts');
const OUT_TABLES = path.join(GENERATED_DIR, 'db-tables.ts');

const supportedDbs = ['mysql', 'postgresql'];

async function generateTypes() {
    if (!supportedDbs.includes(config.client)) {
        throw new Error(
            `Only ${supportedDbs.join('/')} databases are supported, not ${
                config.client
            }`
        );
    }

    const tableNames: string[] = tables.map(table => table.name).sort();
    const connectionString = dbConnectionString(config);

    console.log(`Reading from: ${connectionString}`);
    const contents = await typescriptOfSchema(connectionString, tableNames, null, {
        writeHeader: false,
        camelCase: false,
    });

    console.log(`Writing types to: ${OUT_TYPES}`);
    await fs.ensureDir(GENERATED_DIR);
    await fs.writeFile(OUT_TYPES, prettierFormat(contents, {parser: 'typescript'}));

    console.log(`Writing tables to: ${OUT_TABLES}`);
    const tableRows: string[] = tableNames.map(tableName => {
        return `${tableName}: dbt.${tableName};`;
        // return `${camelCase(tableName)}: dbt.${upperFirst(camelCase(tableName))};`;
    });
    await fs.writeFile(
        OUT_TABLES,
        prettierFormat(
            `/* Auto generated by ${__filename.replace(__dirname, '')} */
            import * as dbt from './db-types';

            export interface DBTables {
                ${tableRows.join('\n')}
            }

            export type DBTableName = Extract<keyof DBTables, string>;
            `,
            {parser: 'typescript'}
        )
    );
}

interface DatabaseConfig {
    client: string;
    connection: {
        host: string;
        port: number;
        user: string;
        password: string;
        database: string;
    };
}

function dbConnectionString(config: DatabaseConfig) {
    const {
        client,
        connection: {host, port, user, password, database},
    } = config;

    return `${client}://${user}:${password}@${host}:${port}/${database}`;
}

generateTypes()
    .then(() => {
        console.log('Types generated.');
        process.exit();
    })
    .catch(e => {
        console.error(e);
        process.exit(1);
    });
